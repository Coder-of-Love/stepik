/*
Реализуйте метод, проверяющий, является ли заданная строка палиндромом. Палиндромом называется строка, которая читается одинаково слева направо и справа налево (в том числе пустая). При определении "палиндромности" строки должны учитываться только буквы и цифры. А пробелы, знаки препинания, а также регистр символов должны игнорироваться. Гарантируется, что в метод попадают только строки, состоящие из символов ASCII (цифры, латинские буквы, знаки препинания). Т.е. русских, китайских и прочих экзотических символов в строке не будет.

Воспользуйтесь предоставленным шаблоном. Декларацию класса, метод main и обработку ввода-вывода добавит проверяющая система.

Подсказки (не читайте, если хотите решить сами):

для удаления из строки всех символов, не являющихся буквами и цифрами, можно воспользоваться регулярным выражением "[^a-zA-Z0-9]"; найдите в классе String метод, выполняющий замену по регулярному выражению;
для перестановки символов строки в обратном порядке можно воспользоваться методом reverse(), который находится в классе StringBuilder;
в классе String есть методы для преобразования всей строки в верхний и нижний регистр.

Sample Input:
Madam, I'm Adam!

Sample Output:
true
*/

//мое
public static boolean isPalindrome (String text) {
        String 
                tmp = text.replaceAll("[^A-Za-z1-9]+", "").toLowerCase(), 
                tmprev = new StringBuilder(tmp).reverse().toString();
        
        return (tmp.equals(tmprev));
}

//чужое, самое популярное
public static boolean isPalindrome (String text) {
    text = text.toLowerCase().replaceAll("[^a-z0-9]", "");
    int len = text.length();
    // Сравниваем попарно символы, двигаясь от краёв к середине
    // Если находим хоть одну разную пару, то возвращаем false
    // Если не нашли, то возвращаем true
    for (int i=0; i<(len/2); i++){
        if (text.charAt(i) != text.charAt(len - 1 - i)) return false;
    }
    return true;
}

//чужое, краткое
public static boolean isPalindrome(String text) {
    String result = text.replaceAll("[^a-zA-Z0-9]", "");
    return result.equalsIgnoreCase(new StringBuilder(result).reverse().toString());
}
